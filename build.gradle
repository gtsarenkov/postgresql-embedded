plugins {
  id 'io.spring.dependency-management'
  id "com.github.ben-manes.versions"
  id 'com.github.jk1.dependency-license-report'
  id "org.owasp.dependencycheck"
  id "com.github.spotbugs"
}
apply plugin: "java"
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

group = "ru.yandex.qatools.embed"
version = "${embeddedPostgresqlVersion}"

configurations {
  compileOnly.extendsFrom annotationProcessor
}

repositories {
  mavenCentral()
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootPluginVersion}"
  }
}

dependencies {
  annotationProcessor "org.immutables:value:${immutablesVersion}"
  annotationProcessor "org.immutables:builder:${immutablesVersion}"

  implementation "de.flapdoodle.embed:de.flapdoodle.embed.process:${embedProcessVersion}"
  implementation "commons-io:commons-io:${commonsIoVersion}"
  implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
  implementation "org.apache.commons:commons-compress:${commonsCompressVersion}"
  implementation "org.postgresql:postgresql:${postgresqlJdbcVersion}"
  implementation "org.slf4j:slf4j-api:${slf4jVersion}"

  runtimeOnly "net.java.dev.jna:jna:${jnaPlatformVersion}"
  runtimeOnly "net.java.dev.jna:jna-platform:${jnaPlatformVersion}"

  testImplementation("org.springframework:spring-beans") {
    exclude module: "spring-boot-starter-logging"
  }
  testImplementation("org.springframework:spring-core") {
    exclude module: "spring-boot-starter-logging"
  }
  testImplementation("org.springframework:spring-context") {
    exclude module: "spring-boot-starter-logging"
  }
  testImplementation("org.springframework:spring-test") {
    exclude module: "spring-boot-starter-logging"
  }
  //testImplementation "org.junit.jupiter:junit-jupiter-api"
  //TODO: update to 5.x
  //testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
  //testImplementation "org.junit.vintage:junit-vintage-engine"
  testImplementation "junit:junit:${junitVersion}"
  testImplementation "org.mockito:mockito-core:${mockitoVersion}"
  testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"
  testImplementation("org.kubek2k:springockito:${springOckitoVersion}") {
    exclude module: "mockito-all"
  }
  testRuntimeOnly "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
  testRuntimeOnly "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
  testRuntimeOnly "org.slf4j:jul-to-slf4j:${slf4jVersion}"
  testRuntimeOnly "ch.qos.logback:logback-classic"

  spotbugsSlf4j "org.slf4j:slf4j-simple:${slf4jVersion}"
  spotbugs "com.github.spotbugs:spotbugs:${spotbugsVersion}"
}

java {
  withSourcesJar()
  withJavadocJar()
}

spotbugs {
  ignoreFailures = true
}

spotbugsMain {
  reports {
    xml.enabled = false
    html {
      enabled = true
    }
  }
}

spotbugsTest.enabled = false
test {
  useJUnit()
  jvmArgs(["--add-opens", "java.base/java.lang=ALL-UNNAMED"])
  ignoreFailures = true
  reports {
    html.required = true
  }
}

javadoc {
  failOnError = false
  configure(options) {
    tags (
      'todo:X',
      'apiNote:a:API Note:',
      'implSpec:a:Implementation Requirements:',
      'implNote:a:Implementation Note:'
    )
    addStringOption('Xdoclint:none')
  }
}

jar {
  into("META-INF/maven/$project.group/$project.name") {
    from { generatePomFileForMavenJavaPublication }
    rename ".*", "pom.xml"
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}

if (rootProject.equals(project)) {
  idea {
    pathVariables('PROJECT_DIR': file(rootProject.projectDir).parentFile)
    project {
      vcs = 'Git'
      jdkName = "21"
    }
  }
}

task allDeps(type: DependencyReportTask, description: "Prints all dependencies for all configurations") {}
