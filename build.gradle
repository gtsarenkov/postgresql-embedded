plugins {
  id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
  id "com.github.ben-manes.versions" version "${dependencyUpdatePluginVersion}"
  id 'com.github.jk1.dependency-license-report' version "${licenseReportVersion}"
  id "org.owasp.dependencycheck" version "${dependencyCheckVersion}"
  id "com.github.spotbugs" version "${spotbugsPluginVersion}"
}
apply plugin: "java"
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "com.github.spotbugs"

group = "ru.yandex.qatools.embed"
version = "${embeddedPostgresqlVersion}"

repositories {
  jcenter()
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootPluginVersion}"
  }
}

dependencies {
  implementation "de.flapdoodle.embed:de.flapdoodle.embed.process:${embedProcessVersion}"
  implementation "commons-io:commons-io:${commonsIoVersion}"
  implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
  implementation "org.apache.commons:commons-compress:${commonsCompressVersion}"
  implementation "org.postgresql:postgresql:${postgresqlJdbcVersion}"
  implementation "org.slf4j:slf4j-api:${slf4jVersion}"
  runtimeOnly "net.java.dev.jna:jna:${jnaPlatformVersion}"
  runtimeOnly "net.java.dev.jna:jna-platform:${jnaPlatformVersion}"

  testImplementation ("org.springframework:spring-beans")  {
    exclude module: "spring-boot-starter-logging"
    exclude module: "logback-classic"
  }
  testImplementation ("org.springframework:spring-core")  {
    exclude module: "spring-boot-starter-logging"
    exclude module: "logback-classic"
  }
  testImplementation ("org.springframework:spring-context")  {
    exclude module: "spring-boot-starter-logging"
    exclude module: "logback-classic"
  }
  testImplementation ("org.springframework:spring-test")  {
    exclude module: "spring-boot-starter-logging"
    exclude module: "logback-classic"
  }
  testImplementation "org.junit.jupiter:junit-jupiter-api"
  //TODO: update to 5.x
  //testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
  testImplementation "org.junit.vintage:junit-vintage-engine"
  testImplementation "junit:junit:${junitVersion}"
  testImplementation "org.mockito:mockito-core:${mockitoVersion}"
  testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"
  testImplementation "org.kubek2k:springockito:${springOckitoVersion}"
  testImplementation "org.slf4j:slf4j-log4j12:${slf4jVersion}"
  testImplementation "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
  testImplementation "org.slf4j:jul-to-slf4j:${slf4jVersion}"

  spotbugsSlf4j "org.slf4j:slf4j-simple:${slf4jVersion}"
  spotbugs "com.github.spotbugs:spotbugs:${spotbugsVersion}"
}

java {
  withSourcesJar()
}

spotbugs {
  ignoreFailures = true
}

spotbugsMain {
  reports {
    xml.enabled = false
    html {
      enabled = true
    }
  }
}

spotbugsTest.enabled = false
test {
  useJUnitPlatform ()
  ignoreFailures = true
  reports {
    html.enabled = true
  }
}

javadoc {
  failOnError = false
  options.addStringOption('Xdoclint:none')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives javadocJar
}

jar {
  into("META-INF/maven/$project.group/$project.name") {
    from { generatePomFileForMavenJavaPublication }
    rename ".*", "pom.xml"
  }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
